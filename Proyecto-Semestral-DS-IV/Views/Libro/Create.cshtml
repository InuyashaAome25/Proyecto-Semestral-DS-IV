@model Proyecto_Semestral_DS_IV.Models.Modelos.Libro

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="right_col" role="main">
    <div class="">
        <div class="page-title">
            <div class="title_left">
                <h3>Crear Libro</h3>
            </div>
        </div>
        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-12 col-sm-12">
                <div class="x_panel">
                    <div class="x_content">

                        @if (ViewBag.Message != null)
                        {
                            <div class="alert alert-info">@ViewBag.Message</div>
                        }

                        <!-- Contenedor para alertas de error -->
                        <div id="alert-container"></div>

                        <!-- Formulario para Crear Libro -->
                        <form id="form-crear-libro" action="@Url.Action("Create", "Libro")" method="post" class="form-horizontal">
                            @Html.AntiForgeryToken()
                            <span class="section">Información Libro</span>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Título:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.EditorFor(model => model.Titulo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Título del Libro" } })
                                    @Html.ValidationMessageFor(model => model.Titulo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <!-- Campo ISBN y Botón para Generar ISBN -->
                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">ISBN:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control", @placeholder = "ISBN del Libro", id = "isbn" } })
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-secondary" onclick="llamarGenerarISBN()">Generar ISBN</button>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Editorial:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.EditorFor(model => model.Editorial, new { htmlAttributes = new { @class = "form-control", @placeholder = "Editorial del Libro" } })
                                    @Html.ValidationMessageFor(model => model.Editorial, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Fecha de Publicación:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.EditorFor(model => model.FechaPublicacion, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                                    @Html.ValidationMessageFor(model => model.FechaPublicacion, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Descripción:</label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.TextAreaFor(model => model.DescripcionLibro, new { @class = "form-control", rows = 3, @placeholder = "Descripción del Libro" })
                                    @Html.ValidationMessageFor(model => model.DescripcionLibro, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Stock:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control", @placeholder = "Stock del Libro" } })
                                    @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Género:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.DropDownListFor(model => model.Genero, (SelectList)ViewBag.Generos, "Seleccione un género", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Genero, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="field item form-group">
                                <label class="col-form-label col-md-3 col-sm-3 label-align">Autor:<span class="required">*</span></label>
                                <div class="col-md-6 col-sm-6">
                                    @Html.DropDownListFor(model => model.Autor, (SelectList)ViewBag.Autores, "Seleccione un autor", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Autor, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="ln_solid">
                                <div class="form-group">
                                    <div class="col-md-6 offset-md-3">
                                        <button type="submit" class="btn btn-primary">Crear</button>
                                        <button type="button" class="btn btn-warning" onclick="limpiarCampos()">Limpiar Campos</button>
                                        <input type="reset" class="btn btn-success" value="Restablecer" />
                                    </div>
                                </div>
                            </div>
                        </form>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        // Función para llamar al servidor y generar el ISBN
        function llamarGenerarISBN() {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GenerarISBN", "Libro")',
                success: function (data) {
                    if (data) {
                        document.getElementById("isbn").value = data;
                    } else {
                        mostrarAlertaError("No se recibió un ISBN válido.");
                    }
                },
                error: function (xhr, status, error) {
                    mostrarAlertaError("Error al generar ISBN: " + error);
                }
            });
        }

        // Función para mostrar alertas de error usando Bootstrap
        function mostrarAlertaError(mensaje) {
            var alertContainer = document.getElementById("alert-container");
            alertContainer.innerHTML = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    ${mensaje}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>`;
        }

        // Función para limpiar solo los campos de entrada de datos
        function limpiarCampos() {
            var form = document.getElementById("form-crear-libro");

            // Limpiar inputs de texto y otros tipos
            var inputs = form.querySelectorAll('input:not([type="hidden"]):not([type="submit"]):not([type="reset"]):not([type="button"])');
            inputs.forEach(function(input) {
                input.value = '';
            });

            // Limpiar textareas
            var textareas = form.querySelectorAll('textarea');
            textareas.forEach(function(textarea) {
                textarea.value = '';
            });

            // Limpiar selects
            var selects = form.querySelectorAll('select');
            selects.forEach(function(select) {
                select.selectedIndex = 0;
            });

            console.log("Campos de entrada de datos limpiados.");
        }

        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Validación de formulario utilizando Bootstrap
                var forms = document.getElementsByClassName('needs-validation');
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });

                // Manejo del botón de restablecer
                var resetButton = document.querySelector('input[type="reset"]');
                resetButton.addEventListener('click', function () {
                    // Limpiar mensajes de error
                    var errorMessages = document.querySelectorAll('.text-danger');
                    errorMessages.forEach(function (message) {
                        message.style.display = 'none';
                    });

                    // Limpiar clases de validación
                    var formControls = document.querySelectorAll('.form-control');
                    formControls.forEach(function (control) {
                        control.classList.remove('is-invalid');
                        control.classList.remove('is-valid');
                    });

                    // Limpiar alertas de error
                    var alertContainer = document.getElementById("alert-container");
                    alertContainer.innerHTML = "";
                });
            }, false);
        })();
    </script>
}
